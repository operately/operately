//
// Automatically generated with mix operate.gen.feed.items.index
// Do not edit this file manually
//

import * as React from "react";

import DiscussionCommentSubmitted from "./DiscussionCommentSubmitted"
import DiscussionEditing from "./DiscussionEditing"
import DiscussionPosting from "./DiscussionPosting"
import GoalArchived from "./GoalArchived"
import GoalCheckIn from "./GoalCheckIn"
import GoalCheckInAcknowledgement from "./GoalCheckInAcknowledgement"
import GoalCheckInEdit from "./GoalCheckInEdit"
import GoalCreated from "./GoalCreated"
import GoalEditing from "./GoalEditing"
import ProjectArchived from "./ProjectArchived"
import ProjectClosed from "./ProjectClosed"
import ProjectContributorAddition from "./ProjectContributorAddition"
import ProjectCreated from "./ProjectCreated"
import ProjectDiscussionSubmitted from "./ProjectDiscussionSubmitted"
import ProjectGoalConnection from "./ProjectGoalConnection"
import ProjectGoalDisconnection from "./ProjectGoalDisconnection"
import ProjectMilestoneCommented from "./ProjectMilestoneCommented"
import ProjectMoved from "./ProjectMoved"
import ProjectRenamed from "./ProjectRenamed"
import ProjectReviewAcknowledged from "./ProjectReviewAcknowledged"
import ProjectReviewCommented from "./ProjectReviewCommented"
import ProjectReviewRequestSubmitted from "./ProjectReviewRequestSubmitted"
import ProjectReviewSubmitted from "./ProjectReviewSubmitted"
import ProjectStatusUpdateAcknowledged from "./ProjectStatusUpdateAcknowledged"
import ProjectStatusUpdateCommented from "./ProjectStatusUpdateCommented"
import ProjectStatusUpdateEdit from "./ProjectStatusUpdateEdit"
import ProjectStatusUpdateSubmitted from "./ProjectStatusUpdateSubmitted"
import ProjectTimelineEdited from "./ProjectTimelineEdited"
import TaskAdding from "./TaskAdding"
import TaskClosing from "./TaskClosing"
import TaskNameEditing from "./TaskNameEditing"
import TaskPriorityChange from "./TaskPriorityChange"
import TaskReopening from "./TaskReopening"
import TaskSizeChange from "./TaskSizeChange"

export default function FeedItem({activity, page}) {
  const activityType = activity.content.__typename;

  switch (activityType) {
    case "ActivityContentDiscussionCommentSubmitted":
      return <DiscussionCommentSubmitted activity={activity} page={page} />;
    
    case "ActivityContentDiscussionEditing":
      return <DiscussionEditing activity={activity} page={page} />;
    
    case "ActivityContentDiscussionPosting":
      return <DiscussionPosting activity={activity} page={page} />;
    
    case "ActivityContentGoalArchived":
      return <GoalArchived activity={activity} page={page} />;
    
    case "ActivityContentGoalCheckIn":
      return <GoalCheckIn activity={activity} page={page} />;
    
    case "ActivityContentGoalCheckInAcknowledgement":
      return <GoalCheckInAcknowledgement activity={activity} page={page} />;
    
    case "ActivityContentGoalCheckInEdit":
      return <GoalCheckInEdit activity={activity} page={page} />;
    
    case "ActivityContentGoalCreated":
      return <GoalCreated activity={activity} page={page} />;
    
    case "ActivityContentGoalEditing":
      return <GoalEditing activity={activity} page={page} />;
    
    case "ActivityContentProjectArchived":
      return <ProjectArchived activity={activity} page={page} />;
    
    case "ActivityContentProjectClosed":
      return <ProjectClosed activity={activity} page={page} />;
    
    case "ActivityContentProjectContributorAddition":
      return <ProjectContributorAddition activity={activity} page={page} />;
    
    case "ActivityContentProjectCreated":
      return <ProjectCreated activity={activity} page={page} />;
    
    case "ActivityContentProjectDiscussionSubmitted":
      return <ProjectDiscussionSubmitted activity={activity} page={page} />;
    
    case "ActivityContentProjectGoalConnection":
      return <ProjectGoalConnection activity={activity} page={page} />;
    
    case "ActivityContentProjectGoalDisconnection":
      return <ProjectGoalDisconnection activity={activity} page={page} />;
    
    case "ActivityContentProjectMilestoneCommented":
      return <ProjectMilestoneCommented activity={activity} page={page} />;
    
    case "ActivityContentProjectMoved":
      return <ProjectMoved activity={activity} page={page} />;
    
    case "ActivityContentProjectRenamed":
      return <ProjectRenamed activity={activity} page={page} />;
    
    case "ActivityContentProjectReviewAcknowledged":
      return <ProjectReviewAcknowledged activity={activity} page={page} />;
    
    case "ActivityContentProjectReviewCommented":
      return <ProjectReviewCommented activity={activity} page={page} />;
    
    case "ActivityContentProjectReviewRequestSubmitted":
      return <ProjectReviewRequestSubmitted activity={activity} page={page} />;
    
    case "ActivityContentProjectReviewSubmitted":
      return <ProjectReviewSubmitted activity={activity} page={page} />;
    
    case "ActivityContentProjectStatusUpdateAcknowledged":
      return <ProjectStatusUpdateAcknowledged activity={activity} page={page} />;
    
    case "ActivityContentProjectStatusUpdateCommented":
      return <ProjectStatusUpdateCommented activity={activity} page={page} />;
    
    case "ActivityContentProjectStatusUpdateEdit":
      return <ProjectStatusUpdateEdit activity={activity} page={page} />;
    
    case "ActivityContentProjectStatusUpdateSubmitted":
      return <ProjectStatusUpdateSubmitted activity={activity} page={page} />;
    
    case "ActivityContentProjectTimelineEdited":
      return <ProjectTimelineEdited activity={activity} page={page} />;
    
    case "ActivityContentTaskAdding":
      return <TaskAdding activity={activity} page={page} />;
    
    case "ActivityContentTaskClosing":
      return <TaskClosing activity={activity} page={page} />;
    
    case "ActivityContentTaskNameEditing":
      return <TaskNameEditing activity={activity} page={page} />;
    
    case "ActivityContentTaskPriorityChange":
      return <TaskPriorityChange activity={activity} page={page} />;
    
    case "ActivityContentTaskReopening":
      return <TaskReopening activity={activity} page={page} />;
    
    case "ActivityContentTaskSizeChange":
      return <TaskSizeChange activity={activity} page={page} />;
    
    default:
      throw "unhandled activity type " + activityType + " in assets/js/components/Feed/FeedItem/index.tsx";
  }
}
