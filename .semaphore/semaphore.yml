version: v1.0
name: Operately â€” Build & Test
agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu2004

auto_cancel:
  running:
    when: "branch != 'main'"

blocks:
  - name: Pre-Flight-Check
    dependencies: []
    task:
      jobs:
        - name: PR Name Check
          commands:
            - checkout
            - make test.pr.name

  - name: Tests
    dependencies: ["Pre-Flight-Check"]
    task:
      prologue:
        commands:
          - checkout
          - cache restore
          - cd assets && cache restore && cd .. # cache node_packages
          - make test.init
          - make test.seed.env
          - ./devenv up
          - make test.setup
      epilogue:
        always:
          commands:
            - '[ -f testreports/junit.xml ] && test-results publish testreports/junit.xml'
            - cache store
            - cd assets && cache store && cd .. # cache node_packages
            - artifact push workflow screenshots
      jobs:
        - name: Unit Tests
          commands:
            - make test.mix.unit
            - make test.npm

        - name: Features
          parallelism: 4
          commands:
            - make test.mix.features INDEX=$SEMAPHORE_JOB_INDEX TOTAL=$SEMAPHORE_JOB_COUNT

        - name: Typescript Linting
          commands:
            - make test.js.dead.code
            - make test.tsc.lint
            - make test.prettier.check

        - name: Licence Check
          commands:
            - make test.license.check

  - name: Docker Build
    dependencies: ["Pre-Flight-Check"]
    run:
      when: "branch = 'main'"
    task:
      secrets:
        - name: docker-push
      prologue:
        commands:
          - checkout
          - cache restore
      jobs:
        - name: "Docker Release"
          commands:
            - docker pull operately/operately:latest
            - make docker.build
            - make docker.push

  - name: Release Tests
    dependencies: ["Pre-Flight-Check"]
    task:
      jobs:
        - name: Single Host Release
          commands:
            - checkout
            - elixir rel/single-host/build.exs $(git rev-parse HEAD)
            - test -f build/single-host-$(git rev-parse HEAD)/operately.tar.gz

after_pipeline:
  task:
    jobs:
      - name: Publish Results
        commands:
          - test-results gen-pipeline-report

promotions:
  - name: Production Deployment
    pipeline_file: deploy.yml
    auto_promote:
      when: "result = 'passed' and branch = 'main'"
