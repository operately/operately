defmodule Mix.Tasks.Operately.Gen.Elixir.Graphql.Schema do
  def run(_args) do
    schema = template()
    File.write("lib/operately_web/graphql/schema.ex", schema)
  end

  def template do
    """
    defmodule OperatelyWeb.Graphql.Schema do
      #
      # This file is generated by: mix operately.gen.elixir.graphql.schema
      # Do not edit this file directly.
      #

      use Absinthe.Schema

      import_types Absinthe.Type.Custom

      # Types
      #{indent(gen_import_type_statements(Path.wildcard("lib/operately_web/graphql/types/*.ex")), 2)}

      # Queries
      #{indent(gen_import_type_statements(Path.wildcard("lib/operately_web/graphql/queries/*.ex")), 2)}

      # Mutations
      #{indent(gen_import_type_statements(Path.wildcard("lib/operately_web/graphql/mutations/*.ex")), 2)}

      query do
        #{indent(gen_import_field_statements(Path.wildcard("lib/operately_web/graphql/queries/*.ex"), "_queries"), 4)}
      end

      mutation do
        #{indent(gen_import_field_statements(Path.wildcard("lib/operately_web/graphql/mutations/*.ex"), "_mutations"), 4)}
      end
    end
    """
  end

  def gen_import_type_statements(files) do
    files
    |> Enum.map(fn file -> path_to_module_name(file) end)
    |> Enum.map(fn module -> "import_types #{module}" end)
    |> Enum.join("\n")
  end

  def gen_import_field_statements(files, suffix) do
    files
    |> Enum.map(fn file -> filename(file) end)
    |> Enum.map(fn file -> Inflex.singularize(file) end)
    |> Enum.map(fn file -> "import_fields :#{file}#{suffix}" end)
    |> Enum.join("\n")
  end

  def indent(lines, spaces) do
    first_line = Enum.at(String.split(lines, "\n"), 0)
    rest_lines = Enum.drop(String.split(lines, "\n"), 1) |> Enum.map(fn line -> String.duplicate(" ", spaces) <> line end)
    all_lines = [first_line] ++ rest_lines

    Enum.join(all_lines, "\n")
  end

  def path_to_module_name(path) do
    path 
    |> String.replace("lib/", "") 
    |> String.replace(".ex", "")
    |> String.split("/")
    |> Enum.map(fn part -> Macro.camelize(part) end)
    |> Enum.join(".")
  end

  def filename(path) do
    path |> String.split("/") |> List.last() |> String.replace(".ex", "")
  end
end
