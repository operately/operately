defmodule Mix.Tasks.Operately.Gen.Graphql.Js.Fragments do
  import Mix.Operately, only: [indent: 2, generate_file: 2]

  def run(_args) do
    Mix.Tasks.Absinthe.Schema.Json.run(["--schema", "OperatelyWeb.Graphql.Schema", "--pretty"])
    File.rename("schema.json", "tmp/schema.json")

    schema = "tmp/schema.json" |> File.read!() |> Jason.decode!()

    fragments = 
      schema
      |> list_types()
      |> Enum.map(fn t -> gen_type_fragment(t) end)
      |> Enum.join("\n")

    generate_file("assets/js/gql/fragments.js", fn _ ->
      """
      //
      // Auto-generated by mix operately.gen.graphql.js.fragments
      // Do not edit this file directly
      //
      import { gql } from "@apollo/client";
      
      #{fragments}
      """
    end)
  end

  def list_types(schema) do
    schema["data"]["__schema"]["types"]
    |> Enum.filter(fn t -> !String.starts_with?(t["name"], "__") end)
    |> Enum.filter(fn t -> t["name"] != "RootQueryType" end)
    |> Enum.filter(fn t -> t["name"] != "RootMutationType" end)
    |> Enum.filter(fn t -> t["kind"] != "SCALAR" end)
    |> Enum.filter(fn t -> t["kind"] != "INPUT_OBJECT" end)
  end

  def gen_type_fragment(type) do
    case type["kind"] do
      "OBJECT" -> gen_object_fragment(type)
      "UNION" -> gen_union_fragment(type)
      e -> raise "Unknown type: #{inspect(e)}"
    end
  end

  def gen_object_fragment(type) do
    """
    export const #{type["name"]}Fields = gql`
      fragment #{type["name"]}Fields on #{type["name"]} {
        #{indent(gen_fields(type), 4)}
      }
    `;
    """
  end

  def gen_union_fragment(type) do
    possible_types = 
      type["possibleTypes"]
      |> Enum.map(fn t -> "... on #{t["name"]} { ...#{t["name"]}Fields }" end)
      |> Enum.join("\n")

    """
    export const #{type["name"]}Fields = gql`
      fragment #{type["name"]}Fields on #{type["name"]} {
        __typename

        #{indent(possible_types, 4)}
      }
    `;
    """
  end

  def gen_fields(type) do
    type["fields"] |> Enum.map(fn f -> gen_field(f) end) |> Enum.join("\n")
  end

  def gen_field(field) do
    field["name"] <> gen_field_type(field["type"])
  end

  def gen_field_type(type) do
    cond do
      type["kind"] == "SCALAR" -> ""
      type["kind"] == "OBJECT" -> " { ...#{type["name"]}Fields }"
      type["kind"] == "UNION" -> " { ...#{type["name"]}Fields }"

      type["kind"] == "NON_NULL" -> gen_field_type(type["ofType"])
      type["kind"] == "LIST" -> gen_field_type(type["ofType"])

      true -> raise "Unknown field type: #{inspect(type)}"
    end
  end
end
