#!/bin/bash

# Script to list GitHub Copilot Agents (AI coding agents running in the background)
# Requires: gh CLI tool to be installed and authenticated

set -euo pipefail

# Color definitions for hacker-themed UI
GREEN='\033[0;32m'
BRIGHT_GREEN='\033[1;32m'
DARK_GREEN='\033[2;32m'
CYAN='\033[0;36m'
BRIGHT_CYAN='\033[1;36m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
WHITE='\033[1;37m'
BRIGHT_WHITE='\033[1;37m'
GRAY='\033[0;37m'
DIM='\033[2m'
BOLD='\033[1m'
RESET='\033[0m'

# Unicode characters for fancy display
BLOCK_FULL="█"
BLOCK_LIGHT="░"
BLOCK_MEDIUM="▒"
BLOCK_DARK="▓"
ARROW_RIGHT="▶"
BULLET="●"
CHECK="✓"
CROSS="✗"

# Function to print animated header
print_header() {
    clear
    echo -e "${BRIGHT_GREEN}"
    echo "████████╗████████╗████████╗████████╗████████╗████████╗████████╗████████╗████████╗"
    echo "╚══██╔══╝╚══██╔══╝╚══██╔══╝╚══██╔══╝╚══██╔══╝╚══██╔══╝╚══██╔══╝╚══██╔══╝╚══██╔══╝"
    echo "   ██║      ██║      ██║      ██║      ██║      ██║      ██║      ██║      ██║   "
    echo "   ██║      ██║      ██║      ██║      ██║      ██║      ██║      ██║      ██║   "
    echo "   ╚═╝      ╚═╝      ╚═╝      ╚═╝      ╚═╝      ╚═╝      ╚═╝      ╚═╝      ╚═╝   "
    echo -e "${RESET}"
    echo -e "${BRIGHT_CYAN}╔═══════════════════════════════════════════════════════════════════════════════════╗${RESET}"
    echo -e "${BRIGHT_CYAN}║${RESET}                         ${BRIGHT_GREEN}COPILOT AGENT MONITOR v2.0${RESET}                        ${BRIGHT_CYAN}║${RESET}"
    echo -e "${BRIGHT_CYAN}║${RESET}                    ${DIM}Scanning for active AI coding agents...${RESET}                   ${BRIGHT_CYAN}║${RESET}"
    echo -e "${BRIGHT_CYAN}╚═══════════════════════════════════════════════════════════════════════════════════╝${RESET}"
    echo
}

# Function to print status with animation
print_status() {
    local message=$1
    local status=$2
    local color=$3
    
    echo -ne "${GRAY}[${RESET}"
    case $status in
        "OK")
            echo -ne "${BRIGHT_GREEN}${CHECK}${RESET}"
            ;;
        "ERROR")
            echo -ne "${RED}${CROSS}${RESET}"
            ;;
        "INFO")
            echo -ne "${CYAN}${BULLET}${RESET}"
            ;;
        "SCANNING")
            echo -ne "${YELLOW}${ARROW_RIGHT}${RESET}"
            ;;
    esac
    echo -e "${GRAY}] ${color}${message}${RESET}"
}

# Function to display agent info in hacker style
display_agent() {
    local pr_number=$1
    local title=$2
    local author=$3
    local created=$4
    local days_ago=$5
    
    # Calculate padding for proper alignment (83 characters total width)
    local task_line="TASK: ${title:0:70}$([ ${#title} -gt 70 ] && echo "...")"
    local init_line="INIT: ${created}"
    
    # Pad lines to 82 characters (leaving 1 space before the closing border)
    printf -v task_padded "%-82s" " $task_line"
    printf -v init_padded "%-82s" " $init_line"
    
    echo -e "${DIM}╔═══════════════════════════════════════════════════════════════════════════════════╗${RESET}"
    echo -e "${DIM}║${RESET} ${BRIGHT_GREEN}AGENT${RESET} ${BRIGHT_CYAN}#${pr_number}${RESET} ${DIM}│${RESET} ${YELLOW}STATUS: ACTIVE${RESET} ${DIM}│${RESET} ${GRAY}UPTIME: ${days_ago}${RESET} ${DIM}║${RESET}"
    echo -e "${DIM}╠═══════════════════════════════════════════════════════════════════════════════════╣${RESET}"
    echo -e "${DIM}║${RESET}${BRIGHT_WHITE}${task_padded}${RESET}${DIM}║${RESET}"
    echo -e "${DIM}║${RESET}${GRAY}${init_padded}${RESET}${DIM}║${RESET}"
    echo -e "${DIM}╚═══════════════════════════════════════════════════════════════════════════════════╝${RESET}"
    echo
}

# Function to calculate days ago
days_ago() {
    local date_str=$1
    local date_seconds=$(date -j -f "%Y-%m-%dT%H:%M:%SZ" "$date_str" "+%s" 2>/dev/null || echo 0)
    local now_seconds=$(date "+%s")
    local diff_seconds=$((now_seconds - date_seconds))
    local days=$((diff_seconds / 86400))
    
    if [ $days -eq 0 ]; then
        echo "TODAY"
    elif [ $days -eq 1 ]; then
        echo "1 DAY AGO"
    else
        echo "${days} DAYS AGO"
    fi
}

# Main execution starts here

# System checks (silent)
if ! command -v gh &> /dev/null; then
    echo -e "${RED}${BLOCK_FULL} CRITICAL ERROR: Install GitHub CLI from https://cli.github.com/${RESET}"
    exit 1
fi

if ! gh auth status &> /dev/null; then
    echo -e "${RED}${BLOCK_FULL} ACCESS DENIED: Run 'gh auth login' to authenticate${RESET}"
    exit 1
fi

# Get repository info (silent)
REPO=$(gh repo view --json owner,name -q '.owner.login + "/" + .name' 2>/dev/null || echo "")

if [ -z "$REPO" ]; then
    echo -e "${RED}${BLOCK_FULL} SYSTEM ERROR: Not in a GitHub repository directory${RESET}"
    exit 1
fi

# Scan for agents (silent)
# Get Copilot agents data with more detailed info
AGENT_DATA=$(gh pr list --state open --json number,title,author,createdAt,state --jq '.[] | select(.author.is_bot == true and (.author.login | test("copilot"; "i"))) | "\(.number)|\(.title)|\(.author.login)|\(.createdAt)"' 2>/dev/null)

if [ -n "$AGENT_DATA" ]; then
    AGENT_COUNT=$(echo "$AGENT_DATA" | wc -l | xargs)
    
    while IFS='|' read -r pr_number title author created; do
        days=$(days_ago "$created")
        display_agent "$pr_number" "$title" "$author" "$created" "$days"
    done <<< "$AGENT_DATA"
else
    print_status "No active agents detected" "INFO" "${YELLOW}"
    echo
    echo -e "${DIM}╔═══════════════════════════════════════════════════════════════════════════════════╗${RESET}"
    echo -e "${DIM}║${RESET}                              ${YELLOW}NO AGENTS ACTIVE${RESET}                               ${DIM}║${RESET}"
    echo -e "${DIM}║${RESET}                     ${GRAY}All Copilot agents are currently idle${RESET}                    ${DIM}║${RESET}"
    echo -e "${DIM}╚═══════════════════════════════════════════════════════════════════════════════════╝${RESET}"
fi

echo
echo -e "${DIM}────────────────────────────────────────────────────────────────────────────────────${RESET}"
echo -e "${GRAY}SYSTEM: ${WHITE}OPERATELY COPILOT MONITOR${RESET} ${DIM}│${RESET} ${GRAY}TARGET: ${WHITE}${REPO}${RESET} ${DIM}│${RESET} ${GRAY}TIME: ${WHITE}$(date '+%Y-%m-%d %H:%M:%S')${RESET}"
echo -e "${DIM}────────────────────────────────────────────────────────────────────────────────────${RESET}"