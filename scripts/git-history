#!/bin/bash

# Usage: ./git-history.sh --weeks-ago=[number]
#
# This script prints the commit history for the specified number of weeks ago.
# The output includes the commit date, hash, author, and message.
#
# The main usage of this script is to quickly see the commit history for a
# specific week in the past, while writting a release message.
#

# Parse command line arguments
for arg in "$@"; do
  case $arg in
    --weeks-ago=*)
      weeks_ago="${arg#*=}"
      shift # Remove the argument from processing
      ;;
    *)
      echo "Unknown option: $arg"
      exit 1
      ;;
  esac
done

if [ -z "$weeks_ago" ]; then
    echo "Missing required argument: --weeks-ago=[number]"
    exit 1
fi

# Define color codes
RESET="\033[0m"
GREEN="\033[0;32m"   # Green for feat:
RED="\033[0;31m"     # Red for fix:
YELLOW="\033[0;33m"  # Yellow for chore:
CYAN="\033[0;36m"    # Cyan for docs:

# Calculate the start and end dates for the specified week
start_date=$(date -d "monday $weeks_ago week ago")
end_date=$(date -d "monday $((weeks_ago - 1)) week ago")

echo "Showing commits from $(date -d "$start_date" +%Y-%m-%d) to $(date -d "$end_date" +%Y-%m-%d)"

# Print the commits from the specified weeks ago
git log --pretty=format:'%ad | %h | %s' --date=short --no-merges --since="$start_date" --until="$end_date" | \
while IFS=' | ' read -r date hash message; do
  # Color the message based on the prefix
  if [[ $message == feat:* ]]; then
      color=$GREEN
  elif [[ $message == fix:* ]]; then
      color=$RED
  elif [[ $message == chore:* ]]; then
      color=$YELLOW
  elif [[ $message == docs:* ]]; then
      color=$CYAN
  else
      color=$RESET
  fi

  # Print the colored message
  printf "%-10s | %s | %b%s%b\n" "$date" "$hash" "$color" "$message" "$RESET"
done
