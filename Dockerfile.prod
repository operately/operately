# Find eligible builder and runner images on Docker Hub. We use Ubuntu/Debian
# instead of Alpine to avoid DNS resolution issues in production.
#
# https://hub.docker.com/r/hexpm/elixir/tags?page=1&name=ubuntu
# https://hub.docker.com/_/ubuntu?tab=tags
#
# This file is based on these images:
#
#   - https://hub.docker.com/r/hexpm/elixir/tags - for the build image
#   - https://hub.docker.com/_/debian?tab=tags&page=1&name=bullseye-20221004-slim - for the release image
#   - https://pkgs.org/ - resource for finding needed packages
#
ARG ELIXIR_VERSION=1.17.2
ARG OTP_VERSION=27.0.1
ARG DEBIAN_VERSION=bookworm-20240904-slim

ARG BUILDER_IMAGE="hexpm/elixir:${ELIXIR_VERSION}-erlang-${OTP_VERSION}-debian-${DEBIAN_VERSION}"
ARG RUNNER_IMAGE="debian:${DEBIAN_VERSION}"

# --------------------------------------------------------------------------------------

FROM ${BUILDER_IMAGE} AS builder

# install build dependencies
RUN apt-get update -y && apt-get install -y build-essential git curl \
    && apt-get clean && rm -f /var/lib/apt/lists/*_*

# install node
RUN set -uex \
    && apt-get update \
    && apt-get install -y ca-certificates curl gnupg \
    && mkdir -p /etc/apt/keyrings \
    && curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg \
    && NODE_MAJOR=18 \
    && echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list \
    && apt-get update \
    && apt-get install nodejs -y

# prepare build dir
WORKDIR /src

# install hex + rebar
RUN mix local.hex --force && \
    mix local.rebar --force

# set build ENV
ENV MIX_ENV="prod"

# create directory structure
RUN mkdir -p app turboui

# install mix dependencies
COPY app/mix.exs app/mix.lock app/
WORKDIR /src/app
RUN ls -l
RUN mix deps.get --only $MIX_ENV
WORKDIR /src

# copy compile-time config files before we compile dependencies
# to ensure any relevant config change will trigger the dependencies
# to be re-compiled.
COPY app/config/config.exs app/config/${MIX_ENV}.exs app/config/

# copy turboui files
COPY turboui/package.json turboui/package-lock.json turboui/tsconfig.json turboui/
COPY turboui/src turboui/src

# build turboui assets
WORKDIR /src/turboui
RUN npm install
RUN npm run build
WORKDIR /src

# copy app files
COPY app/priv app/priv
COPY app/assets app/assets
COPY app/lib app/lib
COPY app/ee app/ee
COPY app/package.json app/package-lock.json app/
COPY app/tsconfig.json app/
COPY app/vite.config.mjs app/

WORKDIR /src/app

# compile dependencies
RUN mix deps.compile

# compile app assets
RUN npm install
RUN npm run build
RUN mix assets.deploy

# Compile the release
RUN mix compile

# Changes to config/runtime.exs don't require recompiling the code
COPY app/config/runtime.exs app/config/

COPY app/rel app/rel
RUN mix release

# --------------------------------------------------------------------------------------

# start a new build stage so that the final image will only contain
# the compiled release and other runtime necessities
FROM ${RUNNER_IMAGE}

RUN apt-get update -y && apt-get install -y libstdc++6 openssl libncurses5 locales curl \
  && apt-get clean && rm -f /var/lib/apt/lists/*_*

# Set the locale
RUN sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen

ENV LANG=en_US.UTF-8
ENV LANGUAGE=en_US:en
ENV LC_ALL=en_US.UTF-8

WORKDIR "/opt/operately"
RUN chown nobody /opt/operately
RUN chown nobody /media

# set runner ENV
ENV MIX_ENV="prod"

# Only copy the final release from the build stage
COPY --from=builder --chown=nobody:root /src/app/_build/${MIX_ENV}/rel/operately ./

USER nobody

CMD ["/opt/operately/bin/server"]
